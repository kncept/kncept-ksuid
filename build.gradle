import java.time.Clock
import java.time.LocalDate

// to publish:
// update project version to the appropriate release
// populate gradle.properties
// gradlew publish
// approve at https://oss.sonatype.org
// goto 'Staging Repositories'
// 'close', then 'release' the library

plugins {
    id 'com.kncept.junit.reporter' version '2.0.1'
	id "com.github.spotbugs" version '4.6.0'
	id 'maven-publish'
	id 'signing'
}

apply plugin: 'java'
//apply plugin: 'checkstyle'
//apply plugin: 'pmd'

group = 'com.kncept.ksuid'
version = '1.0.1'
sourceCompatibility = 14
targetCompatibility = 14

defaultTasks 'build', 'check'

def junit5version = '5.8.1'

test.finalizedBy 'junitHtmlReport'
junitHtmlReport {
	testReportsDir = "reports/junitreporter"
}

repositories {
//	mavenLocal() // ./m2/repositories
//	maven { url 'https://repo.spring.io/libs-release'}
	mavenCentral()
}

// eg: https://gist.github.com/MRezaNasirloo/ccfdb24f10ebefee0d871d4e84b37309
def getCheckedOutGitCommitHash() {
	def gitFolder = "$projectDir/.git/"
	def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
	def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
	// def isRef = head.length > 1     // ref: refs/heads/master
	if(isCommit) return head[0].trim()
	def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
	refHead.text.trim()
}

// yyyy-mm-dd, because some countrys DON'T use dd/mm/yy as their date format.
def todaysDate() {
	def date = LocalDate.now(Clock.systemUTC())
	return "${date.getDayOfYear()}-${date.getMonth()}-${date.getDayOfMonth()}"
}

jar {
	manifest { // https://docs.oracle.com/javase/tutorial/deployment/jar/manifestindex.html
		attributes(
				"Main-Class": "com.kncept.ksuid.Ksuid",

				"Created-By": "Gradle ${gradle.gradleVersion}",
				"Build-Jdk": "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
				"Build-OS": "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
				"Build-Date": todaysDate(),
				"Build-Hash": getCheckedOutGitCommitHash(),

				"Name": "com/kncept/",
				"Specification-Title": "Ksuid",
				"Specification-Version": "1.0.0",
				"Specification-Vendor": "Kncept",
				"Implementation-Title": "Kncept-Ksuid",
				"Implementation-Version": archiveVersion,
				"Implementation-Vendor": "Kncept",
		)
	}
}

spotbugsMain {
	reports {
		html {
			enabled = true
			destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
			stylesheet = 'fancy-hist.xsl'
		}
	}
}
spotbugsTest {
	reports {
		html {
			enabled = true
			destination = file("$buildDir/reports/spotbugs/test/spotbugs.html")
			stylesheet = 'fancy-hist.xsl'
		}
	}
}
/*

checkstyle {
	ignoreFailures = false
}

pmd {
	ruleSets = [
        //'java-android',
        'java-basic',
        'java-braces',
        'java-clone',
        'java-codesize',
        'java-comments',
        'java-controversial',
        'java-coupling',
        'java-design',
        'java-empty',
        'java-finalizers',
        'java-imports',
        'java-j2ee',
        'java-javabeans',
        'java-junit',
        'java-logging-jakarta-commons',
        'java-logging-java',
        'java-migrating',
        'java-naming',
        'java-optimizations',
        'java-strictexception',
        'java-strings',
        'java-sunsecure',
        'java-typeresolution',
        'java-unnecessary',
        'java-unusedcode'
	]
	ignoreFailures = true
}
*/

// use JUnit5 Platform for testing
test {
    useJUnitPlatform()
}

// configure the gradle distribiution we use to build the project
// https://docs.gradle.org/current/userguide/gradle_wrapper.html#customizing_wrapper
// Download will be from this kind of URL: https://services.gradle.org/distributions/gradle-6.8.2-bin.zip
wrapper {
	distributionType = Wrapper.DistributionType.ALL
	gradleVersion = "7.3"
}

dependencies {
	testImplementation "org.junit.jupiter:junit-jupiter-api:" + junit5version
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:" + junit5version
}

// add generated resources dir
sourceSets {
	main {
		resources {
			srcDir 'src/generated/resources'
		}
	}
}

task captureCurrentGitHash {
	doLast {
		def resourcesFolder = "$projectDir/src/generated/resources/com/kncept/ksuid"
		def file = new File(resourcesFolder, 'current.hash')
		if (!file.getParentFile().exists()) file.getParentFile().mkdirs() // ensure directories exist
		file.createNewFile()
		file.text = getCheckedOutGitCommitHash()
	}
}
compileJava.dependsOn captureCurrentGitHash


java {
	withJavadocJar()
	withSourcesJar()
}
String publishUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : System.getenv("MAVEN_USERNAME")
String publishPassword = project.hasProperty('ossrhPassword') ? ossrhPassword : System.getenv("MAVEN_PASSWORD")
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			pom {
				name = 'Kncept Ksuid'
				description = 'Time Series URL safe high entropy ID. Compatable with segmentio Ksuid'
				url = 'https://github.com/kncept/kncept-ksuid'
				properties = [
						"corporate.website": "http://kncept.com",
				]
				licenses {
					license {
						name = 'MIT License'
						url = 'https://github.com/kncept/kncept-ksuid/blob/main/LICENSE'
					}
				}
				developers {
					developer {
						id = 'nkrul'
						name = 'Nicholas Krul'
						email = 'nicholas.krul@gmail.com'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/kncept/kncept-ksuid.git'
					developerConnection = 'scm:git:ssh://github.com/kncept/kncept-ksuid.git'
					url = 'https://github.com/kncept/kncept-ksuid'
				}
			}
		}
	}
	repositories {
//		https://docs.github.com/en/free-pro-team@latest/actions/guides/publishing-java-packages-with-gradle
		maven {
			name = "OSSRH"
			url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
			credentials {
				username = publishUsername
				password = publishPassword
			}
		}
	}
}
signing {
	sign publishing.publications.mavenJava
}
tasks.withType(Sign) {
	onlyIf {
//		isReleaseVersion
		new File('gradle.properties').exists() // only sign locally at the moment
	}
}
javadoc {
	if(JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
}
