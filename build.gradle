
plugins {
    id 'com.kncept.junit.reporter' version '2.0.1'
	id 'com.google.cloud.tools.jib' version '2.8.0'
	id "com.github.spotbugs" version '4.6.0'
}

apply plugin: 'java'

apply plugin: 'checkstyle'
apply plugin: 'pmd'

group = 'com.kncept'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 14
targetCompatibility = 14

defaultTasks 'build', 'check'

def junit5version = '5.5.1'

junitHtmlReport {
	failOnEmpty = false
}

repositories {
//	mavenLocal() // ./m2/repositories
//	maven { url 'https://repo.spring.io/libs-release'}
	mavenCentral()
	jcenter()
}


// eg: https://gist.github.com/MRezaNasirloo/ccfdb24f10ebefee0d871d4e84b37309
def getCheckedOutGitCommitHash() {
	def gitFolder = "$projectDir/.git/"
	def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
	def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
	// def isRef = head.length > 1     // ref: refs/heads/master
	if(isCommit) return head[0].trim()
	def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
	refHead.text.trim()
}

/*
spotbugsMain {
	reports {
		html {
			enabled = true
			destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
			stylesheet = 'fancy-hist.xsl'
		}
	}
}
spotbugsTest {
	reports {
		html {
			enabled = true
			destination = file("$buildDir/reports/spotbugs/test/spotbugs.html")
			stylesheet = 'fancy-hist.xsl'
		}
	}
}
checkstyle {
	ignoreFailures = false
}

pmd {
	ruleSets = [
        //'java-android',
        'java-basic',
        'java-braces',
        'java-clone',
        'java-codesize',
        'java-comments',
        'java-controversial',
        'java-coupling',
        'java-design',
        'java-empty',
        'java-finalizers',
        'java-imports',
        'java-j2ee',
        'java-javabeans',
        'java-junit',
        'java-logging-jakarta-commons',
        'java-logging-java',
        'java-migrating',
        'java-naming',
        'java-optimizations',
        'java-strictexception',
        'java-strings',
        'java-sunsecure',
        'java-typeresolution',
        'java-unnecessary',
        'java-unusedcode'
	]
	ignoreFailures = true
}
*/

// use JUnit5 Platform for testing
test {
    useJUnitPlatform()
}

// configure the gradle distribiution we use to build the project
// https://docs.gradle.org/current/userguide/gradle_wrapper.html#customizing_wrapper
// Download will be from this kind of URL: https://services.gradle.org/distributions/gradle-6.8.2-bin.zip
wrapper {
	distributionType = Wrapper.DistributionType.ALL
	gradleVersion = "7.3"
}

dependencies {

	// fix for:
//	warning: unknown enum constant When.MAYBE
//	reason: class file for javax.annotation.meta.When not found
	// https://mvnrepository.com/artifact/com.google.code.findbugs/jsr305
//	implementation 'com.google.code.findbugs:jsr305:3.0.2'
//	implementation 'com.techshroom:jsr305-plus:0.0.1' // MIT licence

	testImplementation "org.junit.jupiter:junit-jupiter-api:" + junit5version
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:" + junit5version
}

// add generated resources dir
sourceSets {
	main {
		resources {
			srcDir 'src/generated/resources'
		}
	}
}

// TODO = embed this into the manifest properly
task captureCurrentGitHash {
	doLast {
		def resourcesFolder = "$projectDir/src/generated/resources/com/kncept/ksuid"
		def file = new File(resourcesFolder, 'current.hash')
		if (!file.getParentFile().exists()) file.getParentFile().mkdirs() // ensure directories exist
		file.createNewFile()
		file.text = getCheckedOutGitCommitHash()
	}
}
compileJava.dependsOn captureCurrentGitHash
